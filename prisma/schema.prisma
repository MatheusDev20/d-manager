// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Developer {
  @@map("developers")
  id        Int      @id @default(autoincrement())
  name      String
  picture  String @db.VarChar(255)
  status String
  tasks PendingTasks[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PendingTasks {
   @@map("tasks")
    id        String   @id @default(cuid())
    description String
    status String
    priority String
    customer String?
    developer Developer @relation(fields: [developerId], references: [id])
    developerId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dailys {
  @@map("dailys")
  id        String   @id @default(cuid())
  started_at DateTime
  finished_at DateTime
  numberOfTasksCreated Int
  day String
  wasFinishedInTime Boolean
  durationInMinutes Int
}

model Users {
  @@map("users")
  id      String   @id @default(cuid())
  email   String   @unique
  name    String
  password String
  picture String? @db.VarChar(255)
  organization ORG @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ORG {
  @@map("organizations")
  id        String   @id @default(cuid())
  name      String
  picture   String @db.VarChar(255)
  users Users[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}